#####################
# baubles_64x64_2
#####################

G:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]
  (1): nn.Copy
  (2): nn.Linear(100 -> 16384)
  (3): nn.BatchNormalization
  (4): cudnn.ReLU
  (5): nn.View
  (6): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
  (7): nn.SpatialBatchNormalization
  (8): cudnn.ReLU
  (9): nn.SpatialUpSamplingNearest
  (10): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
  (11): nn.SpatialBatchNormalization
  (12): cudnn.ReLU
  (13): nn.SpatialUpSamplingNearest
  (14): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
  (15): nn.SpatialBatchNormalization
  (16): cudnn.ReLU
  (17): nn.SpatialUpSamplingNearest
  (18): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
  (19): nn.SpatialBatchNormalization
  (20): cudnn.ReLU
  (21): cudnn.SpatialConvolution(64 -> 1, 3x3, 1,1, 1,1)
  (22): nn.Sigmoid
  (23): nn.Copy
}
	
D:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]
  (1): nn.Copy
  (2): nn.SpatialConvolution(1 -> 128, 3x3, 1,1, 1,1)
  (3): nn.PReLU
  (4): nn.SpatialDropout(0.250000)
  (5): nn.SpatialAveragePooling(2,2,2,2)
  (6): nn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
  (7): nn.PReLU
  (8): nn.SpatialDropout(0.250000)
  (9): nn.SpatialAveragePooling(2,2,2,2)
  (10): nn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
  (11): nn.PReLU
  (12): nn.SpatialDropout(0.250000)
  (13): nn.SpatialMaxPooling(2,2,2,2)
  (14): nn.SpatialConvolution(256 -> 512, 3x3, 1,1, 1,1)
  (15): nn.PReLU
  (16): nn.SpatialDropout(0.500000)
  (17): nn.SpatialMaxPooling(2,2,2,2)
  (18): nn.View
  (19): nn.Linear(8192 -> 64)
  (20): nn.PReLU
  (21): nn.Linear(64 -> 1)
  (22): nn.Sigmoid
  (23): nn.Copy
}


#####################
# snow_64x96_2_e1380
# (snow, grayscale images)
#####################

G:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> output]
  (1): nn.Copy
  (2): nn.Linear(100 -> 49152)
  (3): nn.BatchNormalization
  (4): nn.PReLU
  (5): nn.View
  (6): nn.SpatialUpSamplingNearest
  (7): cudnn.SpatialConvolution(512 -> 256, 3x3, 1,1, 1,1)
  (8): nn.SpatialBatchNormalization
  (9): nn.PReLU
  (10): nn.SpatialUpSamplingNearest
  (11): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
  (12): nn.SpatialBatchNormalization
  (13): nn.PReLU
  (14): nn.SpatialUpSamplingNearest
  (15): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
  (16): nn.SpatialBatchNormalization
  (17): nn.PReLU
  (18): cudnn.SpatialConvolution(64 -> 1, 3x3, 1,1, 1,1)
  (19): nn.Sigmoid
  (20): nn.Copy
}
	
D:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> output]
  (1): nn.Copy
  (2): nn.SpatialConvolution(1 -> 256, 5x5, 2,2, 2,2)
  (3): nn.PReLU
  (4): nn.SpatialDropout(0.200000)
  (5): nn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
  (6): nn.PReLU
  (7): nn.SpatialDropout(0.200000)
  (8): nn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
  (9): nn.PReLU
  (10): nn.SpatialDropout(0.200000)
  (11): nn.SpatialMaxPooling(2,2,2,2)
  (12): nn.SpatialConvolution(256 -> 512, 3x3, 1,1, 1,1)
  (13): nn.PReLU
  (14): nn.SpatialDropout(0.200000)
  (15): nn.SpatialMaxPooling(2,2,2,2)
  (16): nn.View
  (17): nn.Linear(49152 -> 64)
  (18): nn.PReLU
  (19): nn.Linear(64 -> 1)
  (20): nn.Sigmoid
  (21): nn.Copy
}


#####################
# snow_64x96
# (snow, color images)
#####################

G:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> output]
  (1): nn.Copy
  (2): nn.Sequential {
    [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> output]
    (1): nn.Linear(100 -> 12288)
    (2): nn.BatchNormalization
    (3): nn.PReLU
    (4): nn.View
    (5): nn.SpatialUpSamplingNearest
    (6): cudnn.SpatialConvolution(512 -> 512, 3x3, 1,1, 1,1)
    (7): nn.SpatialBatchNormalization
    (8): nn.PReLU
    (9): nn.SpatialUpSamplingNearest
    (10): cudnn.SpatialConvolution(512 -> 256, 3x3, 1,1, 1,1)
    (11): nn.SpatialBatchNormalization
    (12): nn.PReLU
    (13): nn.SpatialUpSamplingNearest
    (14): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
    (15): nn.SpatialBatchNormalization
    (16): nn.PReLU
    (17): nn.SpatialUpSamplingNearest
    (18): cudnn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
    (19): nn.SpatialBatchNormalization
    (20): nn.PReLU
    (21): cudnn.SpatialConvolution(128 -> 3, 3x3, 1,1, 1,1)
    (22): nn.Sigmoid
  }
  (3): nn.Copy
}
	
D:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> (24) -> (25) -> (26) -> output]
  (1): nn.SpatialConvolution(3 -> 64, 3x3, 1,1, 1,1)
  (2): nn.PReLU
  (3): nn.SpatialDropout(0.200000)
  (4): nn.SpatialAveragePooling(2,2,2,2)
  (5): nn.SpatialConvolution(64 -> 128, 3x3, 1,1, 1,1)
  (6): nn.PReLU
  (7): nn.SpatialDropout(0.200000)
  (8): nn.SpatialAveragePooling(2,2,2,2)
  (9): nn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
  (10): nn.PReLU
  (11): nn.SpatialDropout(0.200000)
  (12): nn.SpatialAveragePooling(2,2,2,2)
  (13): nn.SpatialConvolution(256 -> 512, 3x3, 1,1, 1,1)
  (14): nn.PReLU
  (15): nn.SpatialDropout(0.200000)
  (16): nn.SpatialAveragePooling(2,2,2,2)
  (17): nn.SpatialConvolution(512 -> 512, 3x3, 1,1, 1,1)
  (18): nn.PReLU
  (19): nn.SpatialDropout(0.500000)
  (20): nn.SpatialAveragePooling(2,2,2,2)
  (21): nn.View
  (22): nn.Linear(3072 -> 512)
  (23): nn.PReLU
  (24): nn.Dropout(0.500000)
  (25): nn.Linear(512 -> 1)
  (26): nn.Sigmoid
}


#####################
# trees64_3_e1230
#####################

G:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]
  (1): nn.Copy
  (2): nn.Linear(100 -> 16384)
  (3): nn.BatchNormalization
  (4): cudnn.ReLU
  (5): nn.View
  (6): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
  (7): nn.SpatialBatchNormalization
  (8): cudnn.ReLU
  (9): nn.SpatialUpSamplingNearest
  (10): cudnn.SpatialConvolution(256 -> 256, 3x3, 1,1, 1,1)
  (11): nn.SpatialBatchNormalization
  (12): cudnn.ReLU
  (13): nn.SpatialUpSamplingNearest
  (14): cudnn.SpatialConvolution(256 -> 128, 3x3, 1,1, 1,1)
  (15): nn.SpatialBatchNormalization
  (16): cudnn.ReLU
  (17): nn.SpatialUpSamplingNearest
  (18): cudnn.SpatialConvolution(128 -> 64, 3x3, 1,1, 1,1)
  (19): nn.SpatialBatchNormalization
  (20): cudnn.ReLU
  (21): cudnn.SpatialConvolution(64 -> 3, 3x3, 1,1, 1,1)
  (22): nn.Sigmoid
  (23): nn.Copy
}
	
D:	
nn.Sequential {
  [input -> (1) -> (2) -> (3) -> (4) -> (5) -> (6) -> (7) -> (8) -> (9) -> (10) -> (11) -> (12) -> (13) -> (14) -> (15) -> (16) -> (17) -> (18) -> (19) -> (20) -> (21) -> (22) -> (23) -> output]
  (1): nn.Copy
  (2): nn.SpatialConvolution(3 -> 128, 3x3, 1,1, 1,1)
  (3): nn.PReLU
  (4): nn.SpatialDropout(0.250000)
  (5): nn.SpatialAveragePooling(2,2,2,2)
  (6): nn.SpatialConvolution(128 -> 128, 3x3, 1,1, 1,1)
  (7): nn.PReLU
  (8): nn.SpatialDropout(0.250000)
  (9): nn.SpatialAveragePooling(2,2,2,2)
  (10): nn.SpatialConvolution(128 -> 256, 3x3, 1,1, 1,1)
  (11): nn.PReLU
  (12): nn.SpatialDropout(0.250000)
  (13): nn.SpatialMaxPooling(2,2,2,2)
  (14): nn.SpatialConvolution(256 -> 512, 3x3, 1,1, 1,1)
  (15): nn.PReLU
  (16): nn.SpatialDropout(0.500000)
  (17): nn.SpatialMaxPooling(2,2,2,2)
  (18): nn.View
  (19): nn.Linear(8192 -> 64)
  (20): nn.PReLU
  (21): nn.Linear(64 -> 1)
  (22): nn.Sigmoid
  (23): nn.Copy
}

